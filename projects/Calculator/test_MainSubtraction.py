# ********RoostGPT********
"""
Test generated by RoostGPT for test test_ii using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=subtraction_071af1c427
ROOST_METHOD_SIG_HASH=subtraction_64554d8809


Scenario 1: Testing subtraction of two positive numbers
Details:
  TestName: test_subtraction_of_positive_numbers
  Description: This test is intended to verify that the function correctly subtracts two positive numbers.
Execution:
  Arrange: Initialize two positive numbers.
  Act: Invoke the function subtraction with the two numbers.
  Assert: Check if the returned result is correct.
Validation:
  Rationalize: The subtraction of two positive numbers is a basic operation that the function should be able to perform correctly. Confirming this behavior ensures the function's basic functionality.

Scenario 2: Testing subtraction of positive and negative numbers
Details:
  TestName: test_subtraction_of_positive_and_negative_numbers
  Description: This test is intended to verify that the function correctly subtracts a negative number from a positive number.
Execution:
  Arrange: Initialize a positive number and a negative number.
  Act: Invoke the function subtraction with the two numbers.
  Assert: Check if the returned result is correct.
Validation:
  Rationalize: The subtraction of a positive number and a negative number is a common operation that the function should be able to perform correctly. This test ensures that the function can handle such scenarios.

Scenario 3: Testing subtraction of two negative numbers
Details:
  TestName: test_subtraction_of_negative_numbers
  Description: This test is intended to verify that the function correctly subtracts two negative numbers.
Execution:
  Arrange: Initialize two negative numbers.
  Act: Invoke the function subtraction with the two numbers.
  Assert: Check if the returned result is correct.
Validation:
  Rationalize: The subtraction of two negative numbers is a common operation that the function should be able to perform correctly. This test ensures that the function can handle such scenarios.

Scenario 4: Testing subtraction of zero and a positive number
Details:
  TestName: test_subtraction_of_zero_and_positive_number
  Description: This test is intended to verify that the function correctly subtracts a positive number from zero.
Execution:
  Arrange: Initialize zero and a positive number.
  Act: Invoke the function subtraction with the two numbers.
  Assert: Check if the returned result is correct.
Validation:
  Rationalize: The subtraction of zero and a positive number is a common operation that the function should be able to perform correctly. This test ensures that the function can handle such scenarios.

Scenario 5: Testing subtraction of zero and a negative number
Details:
  TestName: test_subtraction_of_zero_and_negative_number
  Description: This test is intended to verify that the function correctly subtracts a negative number from zero.
Execution:
  Arrange: Initialize zero and a negative number.
  Act: Invoke the function subtraction with the two numbers.
  Assert: Check if the returned result is correct.
Validation:
  Rationalize: The subtraction of zero and a negative number is a common operation that the function should be able to perform correctly. This test ensures that the function can handle such scenarios.
"""

# ********RoostGPT********
import os
import time
import pytest
from Calculator.main import subtraction
from unittest.mock import patch

class Test_MainSubtraction:

    @pytest.mark.parametrize("n1, n2, expected", [(10, 5, 5), (100, 50, 50), (123, 23, 100)])
    @patch('builtins.input', side_effect=[10, 5])
    def test_subtraction_of_positive_numbers(self, input, n1, n2, expected):
        assert subtraction() == expected

    @pytest.mark.parametrize("n1, n2, expected", [(10, -5, 15), (100, -50, 150), (123, -23, 146)])
    @patch('builtins.input', side_effect=[10, -5])
    def test_subtraction_of_positive_and_negative_numbers(self, input, n1, n2, expected):
        assert subtraction() == expected

    @pytest.mark.parametrize("n1, n2, expected", [(-10, -5, -5), (-100, -50, -50), (-123, -23, -100)])
    @patch('builtins.input', side_effect=[-10, -5])
    def test_subtraction_of_negative_numbers(self, input, n1, n2, expected):
        assert subtraction() == expected

    @pytest.mark.parametrize("n1, n2, expected", [(0, 5, -5), (0, 50, -50), (0, 23, -23)])
    @patch('builtins.input', side_effect=[0, 5])
    def test_subtraction_of_zero_and_positive_number(self, input, n1, n2, expected):
        assert subtraction() == expected

    @pytest.mark.parametrize("n1, n2, expected", [(0, -5, 5), (0, -50, 50), (0, -23, 23)])
    @patch('builtins.input', side_effect=[0, -5])
    def test_subtraction_of_zero_and_negative_number(self, input, n1, n2, expected):
        assert subtraction() == expected
