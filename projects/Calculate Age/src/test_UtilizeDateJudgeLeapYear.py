# ********RoostGPT********
"""
Test generated by RoostGPT for test test_5 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=judge_leap_year_a1139da2ea
ROOST_METHOD_SIG_HASH=judge_leap_year_4548bc7362


Scenario 1: Testing Leap Year
Details:
  TestName: test_judge_leap_year_with_leap_year
  Description: This test is intended to verify that the function correctly identifies leap years.
Execution:
  Arrange: No specific setup is required.
  Act: Call the function with a known leap year (e.g., 2000).
  Assert: The function should return True.
Validation:
  The function is expected to accurately determine whether a year is a leap year. If it returns True for a known leap year, it is functioning as expected.

Scenario 2: Testing Non-Leap Year
Details:
  TestName: test_judge_leap_year_with_non_leap_year
  Description: This test is intended to verify that the function correctly identifies non-leap years.
Execution:
  Arrange: No specific setup is required.
  Act: Call the function with a known non-leap year (e.g., 2001).
  Assert: The function should return False.
Validation:
  The function is expected to accurately determine whether a year is a leap year. If it returns False for a known non-leap year, it is functioning as expected.

Scenario 3: Testing Year Zero
Details:
  TestName: test_judge_leap_year_with_zero
  Description: This test is intended to verify that the function handles Year 0 correctly.
Execution:
  Arrange: No specific setup is required.
  Act: Call the function with 0 as the parameter.
  Assert: The function should return True, as Year 0 is considered a leap year.
Validation:
  The function should correctly handle edge cases, including Year 0. If it returns True for Year 0, it is functioning as expected.

Scenario 4: Testing Negative Year
Details:
  TestName: test_judge_leap_year_with_negative_year
  Description: This test is intended to verify that the function handles negative years correctly.
Execution:
  Arrange: No specific setup is required.
  Act: Call the function with a negative year (e.g., -4).
  Assert: The function should return True, as Year -4 is considered a leap year.
Validation:
  The function should correctly handle edge cases, including negative years. If it returns True for a known leap year in negative years, it is functioning as expected.
"""

# ********RoostGPT********
import pytest
from calendar import isleap
from utilize_date import judge_leap_year

class Test_UtilizeDateJudgeLeapYear:

    @pytest.mark.regression
    def test_judge_leap_year_with_leap_year(self):
        assert judge_leap_year(2000) == True, "Failed to identify a leap year"

    @pytest.mark.regression
    def test_judge_leap_year_with_non_leap_year(self):
        assert judge_leap_year(2001) == False, "Incorrectly identified a non-leap year as a leap year"

    @pytest.mark.regression
    def test_judge_leap_year_with_zero(self):
        assert judge_leap_year(0) == True, "Failed to identify year 0 as a leap year"

    @pytest.mark.regression
    def test_judge_leap_year_with_negative_year(self):
        assert judge_leap_year(-4) == True, "Failed to identify a negative leap year"
