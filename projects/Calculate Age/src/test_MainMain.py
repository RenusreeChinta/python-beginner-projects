# ********RoostGPT********
"""
Test generated by RoostGPT for test test_5 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=main_b704279a05
ROOST_METHOD_SIG_HASH=main_105191a9d8


Scenario 1: Test for a valid age input
Details:
  TestName: test_valid_age_input
  Description: This test validates that the function age_calculator works correctly with a valid age input.
Execution:
  Arrange: Prepare a valid name and age input.
  Act: Invoke the function age_calculator with the prepared inputs.
  Assert: Check that the result is a string containing the correct years, months, and days.
Validation:
  This test is important to ensure that the function correctly calculates and formats the age based on the input.

Scenario 2: Test for an invalid age input
Details:
  TestName: test_invalid_age_input
  Description: This test checks if the function correctly handles the input of an invalid age.
Execution:
  Arrange: Prepare a valid name and an invalid age input.
  Act: Invoke the function age_calculator with the prepared inputs.
  Assert: Check that the function raises a ValueError.
Validation:
  This test ensures that the function properly handles and communicates invalid input, which is crucial for user interaction and avoiding potential errors.

Scenario 3: Test for a leap year
Details:
  TestName: test_leap_year
  Description: This test checks if the function correctly calculates the number of days in a leap year.
Execution:
  Arrange: Prepare a valid name and an age input that results in a leap year.
  Act: Invoke the function age_calculator with the prepared inputs.
  Assert: Check that the result is a string containing the correct years, months, and days taking into consideration the leap year.
Validation:
  This test is important to ensure that the function correctly handles leap years, which are a crucial part of date calculation.

Scenario 4: Test for a non-leap year
Details:
  TestName: test_non_leap_year
  Description: This test checks if the function correctly calculates the number of days in a non-leap year.
Execution:
  Arrange: Prepare a valid name and an age input that results in a non-leap year.
  Act: Invoke the function age_calculator with the prepared inputs.
  Assert: Check that the result is a string containing the correct years, months, and days taking into consideration the non-leap year.
Validation:
  This test is important to ensure that the function correctly handles non-leap years, which are a crucial part of date calculation.
"""

# ********RoostGPT********
import pytest
from calculate_age import age_calculator
from unittest.mock import patch

class Test_MainMain:

    @pytest.mark.positive
    def test_valid_age_input(self):
        name = 'John'
        age = 25
        expected_output = f"{name}'s age is {age} years or {age * 12} months or {age * 365} days"
        assert age_calculator(name, age) == expected_output
    
    @pytest.mark.negative
    def test_invalid_age_input(self):
        name = 'John'
        age = -25
        with pytest.raises(ValueError):
            age_calculator(name, age)
    
    @pytest.mark.positive
    def test_leap_year(self):
        name = 'John'
        age = 4 # Considering current year as 2024 which is a leap year
        expected_output = f"{name}'s age is {age} years or {age * 12} months or {age * 365 + 1} days"
        assert age_calculator(name, age) == expected_output

    @pytest.mark.positive
    def test_non_leap_year(self):
        name = 'John'
        age = 3 # Considering current year as 2023 which is a non-leap year
        expected_output = f"{name}'s age is {age} years or {age * 12} months or {age * 365} days"
        assert age_calculator(name, age) == expected_output
  
    @patch('builtins.input', side_effect=['John', '25'])
    def test_main(self, input):
        with patch('builtins.print') as print_mock:
            main()
        print_mock.assert_called_once_with("John's age is 25 years or 300 months or 9125 days")
