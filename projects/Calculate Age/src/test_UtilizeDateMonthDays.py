# ********RoostGPT********
"""
Test generated by RoostGPT for test test_5 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=month_days_33a0a83345
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


Scenario 1: Test for months with 31 days
Details:
  TestName: test_month_days_for_31_days
  Description: This test verifies that the function correctly returns 31 for the months that have 31 days.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the function with a month parameter that should have 31 days.
  Assert: The function should return 31.
Validation:
  This test is important as it verifies the function's ability to correctly identify the months that have 31 days, which is a fundamental part of its business logic.

Scenario 2: Test for months with 30 days
Details:
  TestName: test_month_days_for_30_days
  Description: This test verifies that the function correctly returns 30 for the months that have 30 days.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the function with a month parameter that should have 30 days.
  Assert: The function should return 30.
Validation:
  This test is important as it verifies the function's ability to correctly identify the months that have 30 days, which is a fundamental part of its business logic.

Scenario 3: Test for February in a leap year
Details:
  TestName: test_month_days_for_february_in_leap_year
  Description: This test verifies that the function correctly returns 29 for February in a leap year.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the function with the month parameter set to 2 and the leap_year parameter set to True.
  Assert: The function should return 29.
Validation:
  This test is important as it verifies the function's ability to correctly identify February in a leap year and return the correct number of days, which is a critical part of its business logic.

Scenario 4: Test for February in a non-leap year
Details:
  TestName: test_month_days_for_february_in_non_leap_year
  Description: This test verifies that the function correctly returns 28 for February in a non-leap year.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the function with the month parameter set to 2 and the leap_year parameter set to False.
  Assert: The function should return 28.
Validation:
  This test is important as it verifies the function's ability to correctly identify February in a non-leap year and return the correct number of days, which is a critical part of its business logic.
"""

# ********RoostGPT********
import pytest
from src.utilize_date import month_days

class Test_UtilizeDateMonthDays:
    @pytest.mark.valid
    def test_month_days_for_31_days(self):
        assert month_days(1, False) == 31
        assert month_days(3, False) == 31
        assert month_days(5, False) == 31
        assert month_days(7, False) == 31
        assert month_days(8, False) == 31
        assert month_days(10, False) == 31
        assert month_days(12, False) == 31

    @pytest.mark.valid
    def test_month_days_for_30_days(self):
        assert month_days(4, False) == 30
        assert month_days(6, False) == 30
        assert month_days(9, False) == 30
        assert month_days(11, False) == 30

    @pytest.mark.valid
    def test_month_days_for_february_in_leap_year(self):
        assert month_days(2, True) == 29 

    @pytest.mark.valid
    def test_month_days_for_february_in_non_leap_year(self):
        assert month_days(2, False) == 28
