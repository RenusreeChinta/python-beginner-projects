# ********RoostGPT********
"""
Test generated by RoostGPT for test test_5 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=age_calculator_7d3f466b0e
ROOST_METHOD_SIG_HASH=age_calculator_7c657e0c56


Scenario 1: Verify age calculation for non-leap years
Details:
  TestName: test_age_calculation_non_leap_year
  Description: This test is designed to verify the age calculation of the user in years, months, and days for non-leap years.
Execution:
  Arrange: Initialize the user's name and age. The age should be set for a non-leap year.
  Act: Invoke the age_calculator function with the initialized parameters.
  Assert: Check if the returned string accurately represents the user's age in years, months, and days.
Validation:
  This test ensures that the function accurately calculates the user's age for non-leap years, which is a critical aspect of the function's business logic.

Scenario 2: Verify age calculation for leap years
Details:
  TestName: test_age_calculation_leap_year
  Description: This test is intended to verify the age calculation of the user in years, months, and days for leap years.
Execution:
  Arrange: Initialize the user's name and age. The age should be set for a leap year.
  Act: Invoke the age_calculator function with the initialized parameters.
  Assert: Check if the returned string accurately represents the user's age in years, months, and days.
Validation:
  This test ensures that the function accurately calculates the user's age for leap years, a crucial part of the function's specifications.

Scenario 3: Verify age calculation for current year
Details:
  TestName: test_age_calculation_current_year
  Description: This test is designed to verify the age calculation of the user in years, months, and days for the current year.
Execution:
  Arrange: Initialize the user's name and age. The age should be set as the current year.
  Act: Invoke the age_calculator function with the initialized parameters.
  Assert: Check if the returned string accurately represents the user's age in years, months, and days.
Validation:
  This test ensures that the function can accurately calculate the user's age for the current year, an essential part of the function's business logic.

Scenario 4: Verify age calculation for different months
Details:
  TestName: test_age_calculation_different_months
  Description: This test is designed to verify the age calculation of the user in years, months, and days for different months of the year.
Execution:
  Arrange: Initialize the user's name and age. The age should be set for different months of the year.
  Act: Invoke the age_calculator function with the initialized parameters.
  Assert: Check if the returned string accurately represents the user's age in years, months, and days.
Validation:
  This test ensures that the function can accurately calculate the user's age for different months of the year, a key aspect of the function's business requirements.
"""

# ********RoostGPT********
import time
import pytest
from src.calculate_age import age_calculator
from utilize_date import judge_leap_year, month_days

class Test_CalculateAgeAgeCalculator:

    @pytest.mark.regression
    def test_age_calculation_non_leap_year(self):
        # Arrange
        user_name = "John"
        user_age = 22  # Non-leap year age

        # Act
        result = age_calculator(user_name, user_age)

        # Assert
        assert result == f"{user_name}'s age is {user_age} years or {user_age*12} months or {user_age*365} days"

    @pytest.mark.regression
    def test_age_calculation_leap_year(self):
        # Arrange
        user_name = "Jane"
        user_age = 24  # Leap year age

        # Act
        result = age_calculator(user_name, user_age)

        # Assert
        # As leap year has an extra day, add user_age//4 (number of leap years in user_age) to total days
        assert result == f"{user_name}'s age is {user_age} years or {user_age*12} months or {user_age*365 + user_age//4} days"

    @pytest.mark.regression
    def test_age_calculation_current_year(self):
        # Arrange
        user_name = "Alex"
        user_age = time.localtime(time.time()).tm_year  # Current year age

        # Act
        result = age_calculator(user_name, user_age)

        # Assert
        assert result == f"{user_name}'s age is {user_age} years or {user_age*12} months or {user_age*365 + user_age//4} days"

    @pytest.mark.regression
    def test_age_calculation_different_months(self):
        # Arrange
        user_name = "Alice"
        user_age = 30  # Age with different months

        # Act
        result = age_calculator(user_name, user_age)

        # Assert
        # As leap year has an extra day, add user_age//4 (number of leap years in user_age) to total days
        assert result == f"{user_name}'s age is {user_age} years or {user_age*12} months or {user_age*365 + user_age//4} days"
