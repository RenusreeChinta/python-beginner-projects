# ********RoostGPT********
"""
Test generated by RoostGPT for test test_5 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333


Scenario 1: Verify the function for months having 31 days
Details:
  TestName: test_month_days_for_31_days
  Description: This test will verify that the function returns 31 for the months that have 31 days.
Execution:
  Arrange: No specific setup required.
  Act: Call the function with parameter month set to one of [1, 3, 5, 7, 8, 10, 12] and leap_year set to either True or False.
  Assert: Check that the function returns 31.
Validation:
  It's essential to ensure that the function correctly identifies the months with 31 days, as it is a part of its basic functionality.

Scenario 2: Verify the function for months having 30 days
Details:
  TestName: test_month_days_for_30_days
  Description: This test will verify that the function returns 30 for the months that have 30 days.
Execution:
  Arrange: No specific setup required.
  Act: Call the function with parameter month set to one of [4, 6, 9, 11] and leap_year set to either True or False.
  Assert: Check that the function returns 30.
Validation:
  It's essential to ensure that the function correctly identifies the months with 30 days, as it is a part of its basic functionality.

Scenario 3: Verify the function for February in a leap year
Details:
  TestName: test_month_days_for_february_leap_year
  Description: This test will verify that the function returns 29 for February in a leap year.
Execution:
  Arrange: No specific setup required.
  Act: Call the function with parameter month set to 2 and leap_year set to True.
  Assert: Check that the function returns 29.
Validation:
  It's crucial to ensure that the function correctly identifies February in a leap year, as leap years have an extra day in February.

Scenario 4: Verify the function for February in a non-leap year
Details:
  TestName: test_month_days_for_february_non_leap_year
  Description: This test will verify that the function returns 28 for February in a non-leap year.
Execution:
  Arrange: No specific setup required.
  Act: Call the function with parameter month set to 2 and leap_year set to False.
  Assert: Check that the function returns 28.
Validation:
  It's crucial to ensure that the function correctly identifies February in a non-leap year, as non-leap years have one fewer day in February.
"""

# ********RoostGPT********
import pytest
import time
from calendar import isleap
from CalculateAge.calculate import month_days

class Test_CalculateMonthDays:
  
    @pytest.mark.parametrize("month, leap_year, expected_days", [
        (1, True, 31),
        (3, False, 31),
        (5, True, 31),
        (7, False, 31),
        (8, True, 31),
        (10, False, 31),
        (12, True, 31),
    ])
    def test_month_days_for_31_days(self, month, leap_year, expected_days):
        assert month_days(month, leap_year) == expected_days

    @pytest.mark.parametrize("month, leap_year, expected_days", [
        (4, True, 30),
        (6, False, 30),
        (9, True, 30),
        (11, False, 30),
    ])
    def test_month_days_for_30_days(self, month, leap_year, expected_days):
        assert month_days(month, leap_year) == expected_days

    @pytest.mark.parametrize("month, leap_year, expected_days", [
        (2, True, 29),
    ])
    def test_month_days_for_february_leap_year(self, month, leap_year, expected_days):
        assert month_days(month, leap_year) == expected_days

    @pytest.mark.parametrize("month, leap_year, expected_days", [
        (2, False, 28),
    ])
    def test_month_days_for_february_non_leap_year(self, month, leap_year, expected_days):
        assert month_days(month, leap_year) == expected_days
