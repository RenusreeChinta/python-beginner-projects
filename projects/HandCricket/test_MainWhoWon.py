# ********RoostGPT********
"""
Test generated by RoostGPT for test test_iii using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=who_won_87f5b3664a
ROOST_METHOD_SIG_HASH=who_won_55f93b97b9


Scenario 1: Player 1 wins the game
Details:
  TestName: test_player1_wins
  Description: This test verifies that the function correctly identifies when player 1 wins the game.
Execution:
  Arrange: Initialize player1_score and player2_score with player1_score > player2_score.
  Act: Call the function who_won with the initialized scores.
  Assert: Check the output to confirm it states "Player 1 won".
Validation:
  This test ensures that the function correctly determines the outcome of the game based on the scores. It is important to ensure the correct player is identified as the winner to maintain the game's integrity.

Scenario 2: Player 2 wins the game
Details:
  TestName: test_player2_wins
  Description: This test verifies that the function correctly identifies when player 2 wins the game.
Execution:
  Arrange: Initialize player1_score and player2_score with player2_score > player1_score.
  Act: Call the function who_won with the initialized scores.
  Assert: Check the output to confirm it states "Player 2 won".
Validation:
  This test ensures that the function correctly determines the outcome of the game based on the scores. It is important to ensure the correct player is identified as the winner to maintain the game's integrity.

Scenario 3: The game ends in a draw
Details:
  TestName: test_game_draw
  Description: This test verifies that the function correctly identifies when the game ends in a draw.
Execution:
  Arrange: Initialize player1_score and player2_score with player1_score = player2_score.
  Act: Call the function who_won with the initialized scores.
  Assert: Check the output to confirm it states "The match ended in a draw".
Validation:
  This test ensures that the function correctly identifies a draw scenario. This is crucial for ensuring fairness and correctness of the game results.

Scenario 4: Negative scores
Details:
  TestName: test_negative_scores
  Description: This test verifies how the function handles negative scores.
Execution:
  Arrange: Initialize player1_score and player2_score with negative values.
  Act: Call the function who_won with the initialized scores.
  Assert: Check the output to confirm it correctly states who won based on the negative scores.
Validation:
  This test is important because scores can sometimes be negative, depending on the game rules. The function should be able to handle such scenarios and correctly determine the winner.
"""

# ********RoostGPT********
import pytest
from main import who_won

class Test_MainWhoWon:

    @pytest.mark.positive
    def test_player1_wins(self, capsys):
        player1_score = 10
        player2_score = 5
        who_won(player1_score, player2_score)
        captured = capsys.readouterr()
        assert "Player 1 won" in captured.out

    @pytest.mark.positive
    def test_player2_wins(self, capsys):
        player1_score = 5
        player2_score = 10
        who_won(player1_score, player2_score)
        captured = capsys.readouterr()
        assert "Player 2 won" in captured.out

    @pytest.mark.positive
    def test_game_draw(self, capsys):
        player1_score = 5
        player2_score = 5
        who_won(player1_score, player2_score)
        captured = capsys.readouterr()
        assert "The match ended in a draw" in captured.out

    @pytest.mark.negative
    def test_negative_scores(self, capsys):
        player1_score = -5
        player2_score = -10
        who_won(player1_score, player2_score)
        captured = capsys.readouterr()
        assert "Player 1 won" in captured.out
