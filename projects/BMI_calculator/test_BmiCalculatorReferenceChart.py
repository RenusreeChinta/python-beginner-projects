# ********RoostGPT********
"""
Test generated by RoostGPT for test test_i using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=reference_chart_789b62b9d3
ROOST_METHOD_SIG_HASH=reference_chart_0a10c8e9e3


The function `reference_chart` is not provided in the question. Assuming that this function is a part of the BMI Calculator program and is responsible for generating a reference chart from a CSV file, let's design the test scenarios.

Scenario 1: Valid CSV File with Correct Data
Details:
  TestName: test_reference_chart_valid_csv
  Description: This test verifies that the function `reference_chart` correctly reads a valid CSV file and generates the reference chart.
Execution:
  Arrange: Prepare a CSV file with correct and valid data.
  Act: Invoke the `reference_chart` function with the path of the prepared CSV file.
  Assert: Check if the function returns the expected reference chart.
Validation:
  Rationale: This test ensures that the function works as expected with valid input. The expected outcome would be the correct reference chart generated from the CSV file.

Scenario 2: CSV File with Missing Data
Details:
  TestName: test_reference_chart_missing_data
  Description: This test verifies the function's behavior when the CSV file has missing data.
Execution:
  Arrange: Prepare a CSV file with some missing data.
  Act: Invoke the `reference_chart` function with the path of the prepared CSV file.
  Assert: Check if the function handles missing data gracefully and returns the reference chart with missing data marked or handled appropriately.
Validation:
  Rationale: This test ensures that the function can handle missing data and still generate a usable reference chart.

Scenario 3: CSV File with Incorrect Data
Details:
  TestName: test_reference_chart_incorrect_data
  Description: This test verifies the function's behavior when the CSV file has incorrect data.
Execution:
  Arrange: Prepare a CSV file with some incorrect data.
  Act: Invoke the `reference_chart` function with the path of the prepared CSV file.
  Assert: Check if the function handles incorrect data gracefully, either by ignoring it or by marking it in the generated reference chart.
Validation:
  Rationale: This test ensures that the function can handle incorrect data and still generate a usable reference chart.

Scenario 4: Non-existing CSV File
Details:
  TestName: test_reference_chart_nonexisting_file
  Description: This test verifies the function's behavior when the provided CSV file does not exist.
Execution:
  Arrange: No arrangement needed as the file does not exist.
  Act: Invoke the `reference_chart` function with the path of a non-existing CSV file.
  Assert: Check if the function raises an appropriate exception.
Validation:
  Rationale: This test ensures that the function fails gracefully when the CSV file does not exist. The expected outcome would be an appropriate exception.
"""

# ********RoostGPT********
import pytest
import csv
import tabulate
from BMI_calculator import reference_chart

class Test_BmiCalculatorReferenceChart:

    @pytest.mark.regression
    def test_reference_chart_valid_csv(self, tmpdir):
        # Arrange
        data = [
            ["BMI", "Classification"],
            ["<18.5", "Underweight"],
            ["18.5 - 24.9", "Normal weight"],
            ["25 - 29.9", "Overweight"],
            [">30", "Obese"]
        ]
        p = tmpdir.mkdir("sub").join("bmi.csv")
        with open(p, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerows(data)
        expected_output = tabulate.tabulate(data[1:], headers=data[0], tablefmt="fancy_grid")

        # Act
        output = reference_chart(p)

        # Assert
        assert output == expected_output

    @pytest.mark.negative
    def test_reference_chart_missing_data(self, tmpdir):
        # Arrange
        data = [
            ["BMI", "Classification"],
            ["<18.5", ""],
            ["18.5 - 24.9", "Normal weight"],
            ["", "Overweight"],
            [">30", "Obese"]
        ]
        p = tmpdir.mkdir("sub").join("bmi.csv")
        with open(p, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerows(data)
        expected_output = tabulate.tabulate(data[1:], headers=data[0], tablefmt="fancy_grid")

        # Act
        output = reference_chart(p)

        # Assert
        assert output == expected_output

    @pytest.mark.negative
    def test_reference_chart_incorrect_data(self, tmpdir):
        # Arrange
        data = [
            ["BMI", "Classification"],
            ["<18.5", "Underweight"],
            ["18.5 - 24.9", "Normal weight"],
            ["25 - 29.9", "Invalid"],
            [">30", "Obese"]
        ]
        p = tmpdir.mkdir("sub").join("bmi.csv")
        with open(p, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerows(data)
        expected_output = tabulate.tabulate(data[1:], headers=data[0], tablefmt="fancy_grid")

        # Act
        output = reference_chart(p)

        # Assert
        assert output == expected_output

    @pytest.mark.negative
    def test_reference_chart_nonexisting_file(self):
        # Act and Assert
        with pytest.raises(FileNotFoundError):
            reference_chart("nonexisting.csv")
