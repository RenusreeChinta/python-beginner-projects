# ********RoostGPT********
"""
Test generated by RoostGPT for test test_i using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=interpret_bmi_784476e760
ROOST_METHOD_SIG_HASH=interpret_bmi_52ff0bc812


Scenario 1: Validating BMI Interpretation for Underweight Category
Details:
  TestName: test_interpret_bmi_for_underweight_category
  Description: This test is intended to verify if the function interpret_bmi correctly interprets BMIs that fall under the underweight category (i.e. BMI < 18.5).
Execution:
  Arrange: No special setup is required.
  Act: The function will be invoked with a BMI value less than 18.5.
  Assert: The expected outcome is the string "Underweight", and it will be checked by comparing it against the function's return value.
Validation:
  The importance of this test is to ensure that the function can correctly classify underweight BMIs. This is crucial for the application's ability to provide accurate health advice to users.

Scenario 2: Validating BMI Interpretation for Normal Weight Category
Details:
  TestName: test_interpret_bmi_for_normal_weight_category
  Description: This test is intended to verify if the function interpret_bmi correctly interprets BMIs that fall under the normal weight category (i.e. 18.5 <= BMI < 24.9).
Execution:
  Arrange: No special setup is required.
  Act: The function will be invoked with a BMI value between 18.5 and 24.9.
  Assert: The expected outcome is the string "Normal weight", and it will be checked by comparing it against the function's return value.
Validation:
  This test is essential to ensure that the function can correctly classify normal weight BMIs. This is key to providing accurate health advice to users.

Scenario 3: Validating BMI Interpretation for Overweight Category
Details:
  TestName: test_interpret_bmi_for_overweight_category
  Description: This test is intended to verify if the function interpret_bmi correctly interprets BMIs that fall under the overweight category (i.e. 25 <= BMI < 29.9).
Execution:
  Arrange: No special setup is required.
  Act: The function will be invoked with a BMI value between 25 and 29.9.
  Assert: The expected outcome is the string "Overweight", and it will be checked by comparing it against the function's return value.
Validation:
  This test is crucial to ensure that the function can correctly classify overweight BMIs. This is key to providing accurate health advice to users.

Scenario 4: Validating BMI Interpretation for Obesity Category
Details:
  TestName: test_interpret_bmi_for_obesity_category
  Description: This test is intended to verify if the function interpret_bmi correctly interprets BMIs that fall under the obesity category (i.e. BMI >= 30).
Execution:
  Arrange: No special setup is required.
  Act: The function will be invoked with a BMI value of 30 or more.
  Assert: The expected outcome is the string "Obesity", and it will be checked by comparing it against the function's return value.
Validation:
  This test is important to ensure that the function can correctly classify obesity BMIs. This is key to providing accurate health advice to users.
"""

# ********RoostGPT********
import pytest
from projects.BMI_calculator.BMI_calculator import interpret_bmi

class Test_BmiCalculatorInterpretBmi:
    @pytest.mark.parametrize("bmi, expected", [(18, "Your BMI is 18, you are underweight.")])
    def test_interpret_bmi_for_underweight_category(self, bmi, expected):
        result = interpret_bmi(bmi)
        assert result == expected, f"For BMI: {bmi}, expected: {expected} but got: {result}"

    @pytest.mark.parametrize("bmi, expected", [(22, "Your BMI is 22, you have a normal weight.")])
    def test_interpret_bmi_for_normal_weight_category(self, bmi, expected):
        result = interpret_bmi(bmi)
        assert result == expected, f"For BMI: {bmi}, expected: {expected} but got: {result}"

    @pytest.mark.parametrize("bmi, expected", [(28, "Your BMI is 28, you are overweight.")])
    def test_interpret_bmi_for_overweight_category(self, bmi, expected):
        result = interpret_bmi(bmi)
        assert result == expected, f"For BMI: {bmi}, expected: {expected} but got: {result}"

    @pytest.mark.parametrize("bmi, expected", [(33, "Your BMI is 33, you are obese (Class I)."),
                                               (37, "Your BMI is 37, you are obese (Class II)."),
                                               (42, "Your BMI is 42, you are obese (Class III).")])
    def test_interpret_bmi_for_obesity_category(self, bmi, expected):
        result = interpret_bmi(bmi)
        assert result == expected, f"For BMI: {bmi}, expected: {expected} but got: {result}"
