# ********RoostGPT********
"""
Test generated by RoostGPT for test test_i using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=main_2e91109ffc
ROOST_METHOD_SIG_HASH=main_105191a9d8


```
Scenario 1: Test for correct BMI calculation
Details:
  TestName: test_calculate_bmi
  Description: This test is intended to verify that the calculate_bmi function correctly calculates the BMI given a height and weight.
Execution:
  Arrange: Prepare a set of known height and weight values alongside their expected BMI values.
  Act: Invoke the calculate_bmi function with the prepared height and weight values.
  Assert: The returned BMI values should match the expected BMI values.
Validation:
  It is crucial to ensure the accuracy of the BMI calculation as it forms the basis for the BMI interpretation.

Scenario 2: Test for correct BMI interpretation
Details:
  TestName: test_interpret_bmi
  Description: This test is intended to verify that the interpret_bmi function correctly interprets the BMI according to the defined ranges.
Execution:
  Arrange: Prepare a set of known BMI values alongside their expected interpretations.
  Act: Invoke the interpret_bmi function with the prepared BMI values.
  Assert: The returned interpretations should match the expected interpretations.
Validation:
  The test ensures that the interpret_bmi function accurately classifies the BMI values, which is vital for providing correct health advice to the user.

Scenario 3: Test for handling of ZeroDivisionError in calculate_bmi
Details:
  TestName: test_calculate_bmi_zero_division
  Description: This test is intended to verify that the calculate_bmi function correctly handles a ZeroDivisionError when the height is zero.
Execution:
  Arrange: Prepare a weight value and a height value of zero.
  Act: Invoke the calculate_bmi function with the prepared weight and height values.
  Assert: The function should return None.
Validation:
  This test ensures that the calculate_bmi function properly handles invalid inputs, preventing crashes and providing user-friendly feedback.

Scenario 4: Test for correct interpretation when BMI is None
Details:
  TestName: test_interpret_bmi_none
  Description: This test is intended to verify that the interpret_bmi function correctly handles a None BMI value.
Execution:
  Arrange: Prepare a None BMI value.
  Act: Invoke the interpret_bmi function with the prepared BMI value.
  Assert: The function should return "Invalid input. Height should be greater than 0."
Validation:
  This test ensures that the interpret_bmi function properly handles invalid inputs, preventing crashes and providing user-friendly feedback.

Scenario 5: Test for correct data tabulation in reference_chart
Details:
  TestName: test_reference_chart
  Description: This test is intended to verify that the reference_chart function correctly reads and displays the data from the 'bmi.csv' file.
Execution:
  Arrange: Prepare a 'bmi.csv' file with known data.
  Act: Invoke the reference_chart function.
  Assert: The function should print the data from the 'bmi.csv' file in a tabular format.
Validation:
  This test ensures that the reference_chart function is able to read and display the BMI reference chart correctly, providing the user with a useful reference.
```
"""

# ********RoostGPT********
import pytest
import csv
import tabulate
from BMI_calculator import BMI_calculator

class Test_BmiCalculatorMain:

    @pytest.mark.regression
    def test_calculate_bmi(self):
        test_data = [
            (1.75, 70, 22.86),
            (1.80, 80, 24.69),
            (1.60, 60, 23.44)
        ]
        for height, weight, expected_bmi in test_data:
            assert BMI_calculator.calculate_bmi(height, weight) == expected_bmi

    @pytest.mark.regression
    def test_interpret_bmi(self):
        test_data = [
            (15, "Your BMI is 15, you are underweight."),
            (20, "Your BMI is 20, you have a normal weight."),
            (27, "Your BMI is 27, you are overweight."),
            (32, "Your BMI is 32, you are obese (Class I)."),
            (37, "Your BMI is 37, you are obese (Class II)."),
            (41, "Your BMI is 41, you are obese (Class III).")
        ]
        for bmi, expected_interpretation in test_data:
            assert BMI_calculator.interpret_bmi(bmi) == expected_interpretation

    @pytest.mark.negative
    def test_calculate_bmi_zero_division(self):
        height = 0
        weight = 70
        assert BMI_calculator.calculate_bmi(height, weight) == None

    @pytest.mark.negative
    def test_interpret_bmi_none(self):
        bmi = None
        assert BMI_calculator.interpret_bmi(bmi) == "Invalid input. Height should be greater than 0."

    @pytest.mark.regression
    def test_reference_chart(self, capsys):
        BMI_calculator.reference_chart()
        captured = capsys.readouterr()
        with open('bmi.csv', 'r') as file:
            expected_output = tabulate.tabulate(csv.reader(file), headers="firstrow", tablefmt="fancy_grid")
        assert expected_output in captured.out
